This package sets up a 'masquerade mode' distcc client for gcc (including g++
and objc) and clang/clang++.

With Slackware 14.2, this package also integrates full support for ccache
(including ccache without distcc), although ccache is not enabled by default
(see below).


Configuring distcc

After installing distcc-masq-client, please configure it by editing the file
/etc/distcc/hosts -- you should change '127.0.0.1' to the distcc host
specification for your servers.  This file sets the system-wide default.

Or you can configure distcc for a particular user by setting the DISTCC_HOSTS
environment variable in the user's profile, for example

  export DISTCC_HOSTS="bighost/4 tinyhost"

For details of the format of /etc/distcc/hosts and the DISTCC_HOSTS
environment variable, see 'man distcc', section 'HOST SPECIFICATIONS'.


Configuring ccache

ccache is not enabled by default. It can consume large amounts of storage, and
one-off compilation (e.g. successfully building a package from SlackBuilds.org)
is typically 15% slower than without ccache.

* To enable ccache permanently, please edit the ccache system config file
/etc/ccache.conf -- change the line 'disable = true' to 'disable = false'.

* To use ccache without distcc, please enable ccache as above, and then disable
distcc by editing the file /etc/distcc/hosts -- please delete the line that
contains '127.0.0.1'.

For alternative ways of configuring ccache options, please see 'man ccache',
section 'CONFIGURATION'.


Disabling distcc and ccache

To temporarily disable distcc, you can unset the DISTCC_HOSTS environment
variable.  (This is a change to the upstream behaviour, which would apply the
system-wide defaults if DISTCC_HOSTS is unset.)

  unset DISTCC_HOSTS

To temporarily disable ccache, you can set the CCACHE_DISABLE environment
variable.

  export CCACHE_DISABLE=true

To disable distcc-masq-client (i.e. both ccache and distcc) completely, you can
block execution of the system-wide profile script:

  chmod ugo-x /etc/profile.d/distcc-masq-client.*
